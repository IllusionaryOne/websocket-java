{"name":"websocket-java","tagline":"Websocket client / server Java implementation","body":"# Websocket Client / Server implementation in Java #\r\n\r\nhttp://akinaru.github.io/websocket-java/\r\n\r\n<i>Last update 09/05/2015</i>\r\n\r\nWebsocket Client & Server implementation\r\n\r\nYou will find source in ./libwebsocket folder\r\n\r\n* Very easy to use\r\n* A sample is provided to launch a Websocket server and test with a Javascript Client in exemples/js folder\r\n\r\n<hr/>\r\n\r\n<b>How to launch Websocket Server ?</b>\r\n\r\n``WebsocketServer server = new WebsocketServer(WEBSOCKET_PORT);``<br/>\r\n``server.start();``\r\n\r\nyou specify the port in WEBSOCKET_PORT\r\n\r\n<hr/>\r\n\r\n<b>How to monitor my clients connected to server ?</b>\r\n\r\nJust add a Listener to server object. You have 3 callbacks that will notify you on client connection change and arrival of client messages\r\n\r\n``server.addServerEventListener(new IClientEventListener() {``\r\n\r\n\t\t\t``@Override\r\n\t\t\tpublic void onMessageReceivedFromClient(IWebsocketClient client,\r\n\t\t\t\t\tString message) {\r\n\t\t\t\t//all your message received from websocket client will be here\r\n\t\t\t\tSystem.out.println(\"message received : \" + message);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic void onClientConnection(IWebsocketClient client) {\r\n\t\t\t\t// when a websocket client connect. This will be called (you can store client object)\r\n\t\t\t\tSystem.out.println(\"Websocket client has connected\");\r\n\t\t\t\t\r\n\t\t\t\tclient.sendMessage(\"Hello,I'm a websocket server\");\r\n\t\t\t\t\r\n\t\t\t\t//client.close(); // this would close the client connection\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic void onClientClose(IWebsocketClient client) {\r\n\t\t\t\t// when a websocket client connection close. This will be called (you can dismiss client object)\r\n\t\t\t\tSystem.out.println(\"Websocket client has disconnected\");\r\n\t\t\t}\r\n\t\t});``\r\n\r\n<hr/>\r\n\r\n<b>How to close my websocket server ?</b>\r\n\r\n``server.closeServer();``\r\n\r\n<hr/>\r\n\r\n<b>COMMAND LINE SYNTAX</b> \r\n\r\nThe following will open a websocket on port 4242 (default port value for my exemple)\r\n\r\n``java -cp ../libs/commons-codec-1.9.jar:../libs/http-endec-1.0.jar:wlandecoder-1.0.jar fr.bmartel.websocket.LaunchServer``\r\n\r\nYou can change port number by specifying yours\r\n\r\n``java -cp ../libs/commons-codec-1.9.jar:../libs/http-endec-1.0.jar:wlandecoder-1.0.jar fr.bmartel.websocket.LaunchServer 4343``\r\n\r\nThis exemple is launched from /release folder\r\n\r\n<hr/>\r\n\r\n<b>Exemple with Javascript Client</b>\r\n\r\n* Launch the websocket server on port 4242\r\n* Open the javascript client page in ./exemples/js/ folder\r\n\r\n=> You have now a complete websocket chat between java server <-> javascript client in websocket \r\n\r\n![alt tag](https://raw.github.com/akinaru/websocket-java/master/exemples/readme_images/clientSide.png)\r\n\r\n![alt tag](https://raw.github.com/akinaru/websocket-java/master/exemples/readme_images/serverSide.png)\r\n\r\n<hr/>\r\n\r\n* Project is JRE 1.7 compliant\r\n* You can build it with ant => build.xml\r\n* Development on Eclipse \r\n* Specification from https://tools.ietf.org/html/rfc6455\r\n\r\nSoon : an exemple using this lib as websocket client communicating with a cpp server\r\n","google":"UA-62569105-1","note":"Don't delete this file! It's used internally to help with page regeneration."}